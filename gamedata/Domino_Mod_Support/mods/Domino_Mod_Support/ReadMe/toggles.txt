

Hi, 


ok in this help file im going to describe how you can create your own custom toggle buttons. 
toggle buttons are used by shields, intel, production, i now give you ability to create your own.


Step 1

Create this file structure with your mods folder

/customize/toggles


STEP 2

create a new lua file called toggles.lua in the toggles folder

so you should have this file structure

yourmodname/customize/toggles/toggles.lua


STEP 3

open the toggles.lua file and add this table to it.

Toggles = {
	RULEETC_HunkerToggle = {
		bitmapId = "Empty",
		helpText = "Hunker",

		--***Optional params*** 
		
		--you can specify the default orders slot for this toggle either 7,8 or 13 to 18
		--if you do not specify a slot then slot 13 is used by default
		--preferredSlot = 13,
		
		--you can specify the intial state of the toggle either true or false (false = on, true = off)
		--if you do not specify an initialState then the default is false which is on
		initialState = true, 
		
		--you can specify here if the button is a pulse button or a normal on/off button
		--if you do not specify a pulse flag then false is used by default
		--A pulse toggle never switches off you click the toggle and the button does what you want it to do every time.
		pulse = false, 
	},
}


NOTE 

BITMAPS

toggle button bitmaps are stored in 

\textures\ui\common\game\orders

so make sure your toggle icon is in

yourmodname\textures\ui\common\game\orders\

i have provided a blank set of toggle bitmaps (4 of them per toggle)
copy them from domino_mod_support\textures\ui\common\game\orders\ modify them, rename them
and then place them in the correct folder in your mods textures folder, the name has to be same as
the bitmapid in step 3 above.

TOGGLENAME

togglenames ALWAYS have to start RULEETC_ (THIS IS VERY IMPORTANT)


when you use a toggle button on a unit like shields, you get a shields button on the orders panel, 
when you click the toggle it triggers the scriptbit function in the units script.. 
custom toggles work in exactly the same way except they call 


OnExtraToggleClear = function(self, ToggleName)

end,

and

OnExtraToggleSet = function(self, ToggleName)

end, 

the toggleName is the name we used in the toggles table in step 3 in this case RULEETC_HunkerToggle
the helptext param ALWAYS uses the LOC table so you will have to add LOC table entry for whatever param
you specify as the helptext. (have a look at the LOC help file for more info on adding loc entries)


EXAMPLE of the function use.. 


OnExtraToggleClear = function(self, ToggleName)
	if toggleName == 'RULEETC_HunkerToggle' then 
		--do my stuff here
	end
end

AND

OnExtraToggleSET = function(self, ToggleName)
	if toggleName == 'RULEETC_HunkerToggle' then 
		--do my stuff here
	end
end


the intial state is whether you want the toggle to be on or off initailly.

a pulse toggle never switches off.. rather it always triggers the same event.. 


STEP 4

ok now we need to add the toggle to our unit.. 

There are 2 methods to add a new custom toggle to our unit.

first is the units blueprint. to add a custom toggle via the units blueprint add this to the units blueprint.

i the units General section add a table called 

ExtraCaps = {



}, 

you can then insert your custom toggle into this table
like so

ExtraCaps = {
	RULEETC_HunkerToggle = true, 

}, 

ok once the toggle is defined you can also add it to a unit by doing

self:AddExtraCap('RULEETC_HunkerToggle')

from anywhere in the units script.. 




you can remove a toggle by doing 

self:RemoveExtraCap('RULEETC_HunkerToggle')




you can query a custom toggles state by doing

self:GetExtraBit('RULEETC_HunkerToggle')

this will return either true or false if the unit has this toggle.




we can also set a toggles state by doing 

self:SetExtraBit('RULEETC_HunkerToggle', param)

the param is either true or false, this will set the toggle as you define.